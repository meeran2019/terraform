---------------------------------------------------------------------------------------------------------
TERRAFORM:
---------------------------------------------------------------------------------------------------------

    It is Infrastructure as Code (IaC). 
    Automation of infrastructure. 
    Keep infrastructure in certain state. 
    It makes infrastructure auditable. Store the code in version control system. 
    It works well with automation tools like ansible tools.

---------------------------------------------------------------------------------------------------------
INSTALLATION: 
---------------------------------------------------------------------------------------------------------

    To refer the terraform documentation. 

---------------------------------------------------------------------------------------------------------
TERRAFORM HCL (HASHICORP CONFIGURATION LANGUAGE):
---------------------------------------------------------------------------------------------------------

    Variables can be referenced by, 
        1. using var.variable-name 
        2. using "${var.variable-name}"

---------------------------------------------------------------------------------------------------------
AWS AUTHENTICATIONS: 
---------------------------------------------------------------------------------------------------------

AWS Provides different authentications, 

    Static credentials: 
            Hard coding values for access_key and secret_key inline in aws provider block. 

    Environment variables: 
            Provide credentials via the environment variables of AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. 

    Shared credentials file: 
            Default AWS credential file is stored in $HOME/.aws/credentials.
            Custom location can be given by using shared_credentials_file variable. 
            
    Role: 
            Role ARN will be used to assume the role using assume_role. 

---------------------------------------------------------------------------------------------------------
VARIABLE TYPES: 
---------------------------------------------------------------------------------------------------------

    Simple variable types: 
        String 
        Number 
        Boolean 

    Complex variable types: 
        List(Type): 
                [1,2,3] /  ["a","b"]
                It is ordered. 

        set(type): 
                {1,2,3}
                It contains unique value. 

        map (type): 
                { key1: "value1", key2: "value2"}
                It has key value pair. 
        Tuple: 
                It is like list but each element can be different type.
                [0, "string", boolean]
    
    # If type is not mentioned, based on the value, terraform takes the type. 

    variable "variable-name" {
        default = "sample value"
    }

    variable "variable-name" {
        type = string
        default = "sample value"
    }
    
    variable "variable-name" {
        type = string 

        validation {
            condition = (var.ami_id == "ami-12345")
            error_message = "If condition failed, execute this message"
        }
    }

---------------------------------------------------------------------------------------------------------
SOFTWARE PROVISIONING: 
---------------------------------------------------------------------------------------------------------

There are 2 ways to provision software on server machine, 
    1. Use own cusom AMI with bundled software package in image. Packer is used. 
    2. Boot standard AMI and then install software on it, 
            Using file uploads 
            Using remote exec 
            Using automation tools like chef, puppet, ansible. 
    
    NOTE:   Provisioner is created under resources. To refer the resource, use the self.attribute.
            Mostly used in conjugation with NULL resources. 
            
    File Uploads: 
        It is easy way to upload a file or script. 
        Can be used in conjuction with remote-exec to execute a script. 
        Provisoner may be SSH or WinRM which uses connection. 

        provisioner "file"{
            source = "app.conf"
            destination = "/etc/myapp.conf"
            connection{
                user=
                password=
            }
        }

        provider "remote-exec"{
            inline = ["chmod +x /opt/script.sh", "./script.sh"]
        }

Provisioner - File: 
        To copy the file from running machine to the newly created machine. 

Provisioner - local-exec: 
        Invokes a local executable after resource is created in terraform machine.
        For ex: In lambda to download artifacts. 

Provisioner - remote-exec: 
        Invoke a resource in remote resource after it is created. 
        It requires connection and support both ssh and winrm. 
        It supports the following arguments, 
            inline - ["command1","command2"]
            script - Path to local script which copied to remote resource and executed. 
            scripts - Path to local script which copied to remote resource and executed. They are executed in order they are provided.
            
on_failure = fail / continue    -   on failure, whether to fail or continue. 
when = create / destroy         -   to execute during creation or destroy.

self object is used to refer the parent resource attributes. 
    self.public_ip 

---------------------------------------------------------------------------------------------------------
OUTPUT: 
---------------------------------------------------------------------------------------------------------
    Can use attributes in a script. 

    output "name" {
        value = resource-type.resource-name.attribute-name
    }

    provisioner "local-exec" {
        command = "echo resource-type.resource-name.attribute-name  >> attribute.txt"
    }

---------------------------------------------------------------------------------------------------------
REMOTE STATE: 
---------------------------------------------------------------------------------------------------------

    Terraform store its remote inftrastructure in terraform.tfstate file. 
    .tfstate file can be stored in version control. 
    It helps to collaborate in team.

    backend functionality is used to store the tfstate file: 
        local - default backend 
        remote - save in remote like terraform cloud. It handles locking. 
        s3 (locking using dynamodb )
        consul (locking)

        # Using a single workspace:
        terraform {
          backend "remote" {
            hostname = "app.terraform.io"
            organization = "company"
        
            workspaces {
              name = "my-app-prod"
            }
          }
        }
        
        # Using multiple workspaces:
        terraform {
          backend "remote" {
            hostname = "app.terraform.io"
            organization = "company"

---------------------------------------------------------------------------------------------------------
DATA SOURCE: 
---------------------------------------------------------------------------------------------------------

    It allow terraform to use information defined outside of terraform. 
    It provides dynamic information. 

    data "aws_ami" "example" {
        most_recent = true
      
        owners = ["self"]
        tags = {
          Name   = "app-server"
          Tested = "true"
        }
      }

    data.aws_ami.example.id 

---------------------------------------------------------------------------------------------------------
TEMPLATES: 
---------------------------------------------------------------------------------------------------------

    It helps to creating customized configuration file. 
    Can build templates based on the file. 
    Can be used to generate generic template or cloud init config. 
    If want to pass user data based on other configuration, can use template. 

    data "template_file" "init" {
    template = "${file("${path.module}/init.tpl")}"
    vars = {
        consul_address = "${aws_instance.consul.private_ip}"
    }
    }

    init.tpl 
    #!/bin/bash
    echo "CONSUL_ADDRESS = ${consul_address}" > /tmp/iplist

---------------------------------------------------------------------------------------------------------
TEMPLATES IN TERRAFORM 0.12: 
---------------------------------------------------------------------------------------------------------
    templatefile reads the file at given path and render its content as content using supplied set of tempalte variables. 

    templatefile(path, variables in map)

---------------------------------------------------------------------------------------------------------
OTHER PROVIDERS: 
---------------------------------------------------------------------------------------------------------

    Terraform has many providers to choose from, 
        AWS 
        API 
        Azure 
        Google 
        VMware 
        Datadog 
        Github 

---------------------------------------------------------------------------------------------------------
MODULES: 
---------------------------------------------------------------------------------------------------------

    Use modules to make terraform more organized. 
    reuse the code. 
    use third party modules.
    use a module from github. 
    use a module from local folder. 

    can pass arguments to the model. 

---------------------------------------------------------------------------------------------------------
TERRAFORM COMMANDS: 
---------------------------------------------------------------------------------------------------------

terraform apply 
terraform destroy 
terraform validate 
terraform fmt 
terraform graph 
terraform import address-id     -   import to tfstate file not .tf file.
terraform output 
terraform plan 
terraform refresh               -   refresh remote state
terraform show                  -   show state file in readable
terraform state                 -   for state management
terraform taint                 -   during next apply, destroy and create it 
terraform untaint               -   remove taint 

---------------------------------------------------------------------------------------------------------
INTERPOLATION: 
---------------------------------------------------------------------------------------------------------

    Can interpolate other values using ${}
    
    Can refer resources, variables, data source.

    VARIABLES: 
    
        NAME                    SYNATX                          EXAMPLE
        String                  var.name                        ${var.name}
        Map                     var.name["key"]                 ${var.AMI["us-east-1"]} , 
                                                                ${lookup(var. AMI, var.REGION)}
        
        List                    var.list, var.list[index]       ${var.subnet[i]}
                                                                ${join(",",var.subnets)}

    OUTPUT OF MODULES: 
        
        Output of modules       module.module-name.output-name  ${module.ec2-module.instance-id}
        count information       count.index                     ${count.index}
        path information        path.TYPE                       path.cwd (current working directory)
                                                                path.module  (module path)
                                                                path.root (root module path)

        
        metainformation         terraform FIELD                                             

---------------------------------------------------------------------------------------------------------
CONDITIONALS: 
---------------------------------------------------------------------------------------------------------

    It checks the condition, if true, then returns true value else false value. 

    condition?true-value:false-value 

    count = "${var.env == "prod" ? 2 : 1 }"

    ==, != , < , >, <= , >= , &&, || , Unary ! 

---------------------------------------------------------------------------------------------------------
BUILT-IN FUNCTIONS: 
---------------------------------------------------------------------------------------------------------

    ${file("file-name")}        -   read the content of file. 
    basename(path)              -   basename("/home/tmp/test.txt")  -   returns test.txt 
    coalesce(string, string)    -   returns 1st non empty value 
    element(list,index)         -   returns the single element from te given index. 
    format(format, args)        -   format the string or list. 
    index(list, element)        -   find the index of given element in a list. 
    join(delimeter, list)       -   join with the given delimeter. 
    list(item1, item2)          -   to create the list. 
    lookup(map, key, default)   -   lookup for the key on a map.
    lower(string)               -   convert to lower case.
    map(key, value)             -   returns new map using key & value.
    merge(map1, map2)           -   merger maps (union)
    replace(string, search, replace)    -   search and replace in string.
    split(delimeter, string)    -   split a string into list. 
    substr(string, offset, length)      -   extract substring from string.
    timestamp()                 -   return timestamp
    upper(string)               -   convert to upper case.
    uuid()                      -   
    values(map)                 -   returns the value of map.
    contains (list, value)      -   checks whether value is present in list and returns true/false.
    jsonencode({"hello"="world"})  -> {"hello" : "world"}

---------------------------------------------------------------------------------------------------------
COUNT vs For Each vs For:
---------------------------------------------------------------------------------------------------------

Count - Used to create multiple instances of same resources. 

    variable "my_list" {
      default = ["first", "second", "third"]
    }
    resource "null_resource" "default" {
      count = length(var.my_list)
      triggers = {
        list_index = count.index
        list_value = var.my_list[count.index]
      }
    }
    
   Disadvantages - If any change in position of list - it will force replacement of all resources of which index has changed.
   
For each -  Same as count but it takes Map/Set as input. 
            toset() -> used to convert to set. 
            
            variable "my_list" {
          default = ["zero", "first", "second", "third"]
        }
        resource "null_resource" "default" {
          for_each = toset(var.my_list)
          triggers = {
            list_index = each.key
            list_value = each.value
          }

For: - Iterate over the list or map.
    
    for item in LIST : lower(KEY) => VALUE
    for key,value in MAP : KEY => upper(VALUE)
    
---------------------------------------------------------------------------------------------------------
FOR AND FOR-EACH LOOPS: 
---------------------------------------------------------------------------------------------------------

    For loop features, helps to loop over the variables in list/map , transform it, and output it in different formats of list/map. 

        [ for x in list : upper(x) ]


    For_Each loop is not used when assigning a value to argument but rather to repeat the blocks. 
    for_each does not work on list(string) but work on set(string) & map(string). 

    for_each = var.variable-name 
    instance-type = each.value (If map is used, then each.key)

        ingress {}        

---------------------------------------------------------------------------------------------------------
TERRAFORM PROJECT STRUCTURE: 
---------------------------------------------------------------------------------------------------------

    Use modules. 
    main.tf 
    providers.tf 
    data-sources.tf 
    backend.tf 
    outputs.tf 
    variables.tf 
    terraform.tfvars 

---------------------------------------------------------------------------------------------------------
TERRAFORM WORKSPACE: 
---------------------------------------------------------------------------------------------------------

    Workspace in terraform is independently managed state files. 
    can manage multiple environments with workspaces. 

    /.terraform.tfstate.d/workspace-name

        terraform workspace new     -   create new workspace 
        terraform workspace list    -   shows list of workspace 
        terraform workspace show    -   show the name of current workspace
        terraform workspace select  -   select the workspace 
        terraform workspace delete  -   delete the workspace 

    ${terraform.workspace}      -   can use interpolation to get the current workspace.


---------------------------------------------------------------------------------------------------------
TERRAFORM LOCK FILE: 
---------------------------------------------------------------------------------------------------------

    .terraform.lock.hcl is created during terraform init. 
    it captures the versions of providers and modules. 
    It should be committed to git. 
    rerun of terraform, will use the same version. 
    will update lock file, if provider version is updated. 

---------------------------------------------------------------------------------------------------------
MANIPULATING STATE: 
---------------------------------------------------------------------------------------------------------

    It uses when upgrading between versions. 
    When rename a resources without creating it. 
    Change the position of a resource.

        terraform state list    -   list resources in state 
        terraform state mv      -   move an item in the state or rename. 
        terraform state rm      -   remove an instance from state 
        terraform state show    -   show a resource in the state
        terraform state pull    -   pull current state and output to stdout
        terraform state push    -   overwrite state file by pushing local file to state file. 
        terraform state replace-provider -  to change provider in state file. 
        
---------------------------------------------------------------------------------------------------------
VARIABLE PRECEDENCE: 
---------------------------------------------------------------------------------------------------------
From Higher Precedence to Lower: 
        -var and -var-file in CLI   > *.auto.tfvars or *.auto.tfvars.json  > terraform.tfvars.json  > terraform.tfvars 
